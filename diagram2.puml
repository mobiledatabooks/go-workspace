[plantuml]
----
@startuml
start

title Go (Golang) Multi-Module Workspaces: The Easy Way to Build and Run Code in Multiple Module: Part II

package "Developer" {
    #palegreen:7. Create the workspace;
   -> go.work;
    note left 
    The go work init command tells go to create 
    a go.work file for a workspace containing 
    the modules in the ./fetchall directory.

        go work init ./fetchall

go.work:
---
go 1.19
use (
	./fetchall
)
---
    end note
    #palegreen:8. Run the program in the workspace directory;
    -> go run mobiledatabooks.com/fetchall;
    note left
➜  go-workspace git:(main) ✗ go run mobiledatabooks.com/fetchall  \
https://golang.org \
http://gopl.io https://godoc.org
fetcher.FetchWithBuffer: Fetching URLs...
HTTP status: 200 OK
HTTP status: 200 OK
HTTP status: 200 OK
1.50s elapsed
    end note
    :Download and modify the github.com/mobiledatabooks/go-fetch module;
    
    #palegreen:9. Clone the repository;
    -> git clone;
    note left 
    cd go-workspace
    git clone https://github.com/mobiledatabooks/go-fetch.git

    It creates go-fetch directory:
---
➜  go-workspace git:(main) ✗ tree
.
├── LICENSE
├── README.md
├── fetchall
│   ├── fetchall.go
│   ├── go.mod
│   └── go.sum
├── go-fetch
│   ├── LICENSE
│   ├── README.md
│   ├── fetcher
│   │   ├── fetch.go
│   │   ├── fetchConcurrent.go
│   │   ├── fetchWithBuffer.go
│   │   └── go.mod
│   ├── go.mod
│   ├── go.sum
│   ├── main
│   ├── main.go
├── go.work
├── go.work.sum
---
    end note
    #palegreen:10. Add the module to the workspace;
    -> go work use;
    note left 
go work use ./go-fetch
go work use ./go-fetch/fetcher

go.work:
---
go 1.19

use (
	./fetchall
	./go-fetch
	./go-fetch/fetcher
)
---
    end note

}
stop
@enduml
----
