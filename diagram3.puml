[plantuml]
----
@startuml
start

title Go (Golang) Multi-Module Workspaces: The Easy Way to Build and Run Code in Multiple Module: Part II

package "Developer" {

    :Working with the local copy;
    #palegreen:12. Add the new function.;
    -> FetchConcurrent;
    note left 
// Fetch prints the content found at each specified URL.
package fetcher

import (
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"time"
)

// !+
func FetchConcurrent(url string, ch chan<- string) {
	start := time.Now()
	resp, err := http.Get(url)
	if err != nil {
		ch <- fmt.Sprint(err) // send to channel ch
		return
	}

	nbytes, err := io.Copy(ioutil.Discard, resp.Body)
	resp.Body.Close() // don't leak resources
	if err != nil {
		ch <- fmt.Sprintf("while reading %s: %v", url, err)
		return
	}
	secs := time.Since(start).Seconds()
	ch <- fmt.Sprintf("%.2fs  %7d  %s", secs, nbytes, url)
}

    end note

    #palegreen:13. Modify the main program to use the function.;
    -> main/FetchConcurrent;
    note left 
// Fetchall fetches URLs in parallel and reports their times and sizes.
package main

import (
	"fmt"
	"os"
	"time"

	"github.com/mobiledatabooks/go-fetch/fetcher"
)
func main() {
	fmt.Println("fetcher.FetchConcurrent: Fetching URLs...")
	start = time.Now()
	ch := make(chan string)
	for _, url := range os.Args[1:] {
		go fetcher.FetchConcurrent(url, ch) // start a goroutine
	}
	for range os.Args[1:] {
		fmt.Println(<-ch) // receive from channel ch
	}
	fmt.Printf("%.2fs elapsed\n", time.Since(start).Seconds())
}


    end note  

    #palegreen:14. Modify the fetchall/go.mod to use the local module.;
    -> fetchall/go.mod;
    note left 

    remove require github.com/mobiledatabooks/go-fetch/fetcher v0.0.0-20220821205820-5b3e6cfec1a4
go.mod:
---    
module mobiledatabooks.com/fetchall

go 1.19
---
    end note 

    #palegreen:15. Run the code in the workspace;
    -> go run mobiledatabooks.com/fetchall;
    note left 
➜  go-workspace git:(main) ✗ go run mobiledatabooks.com/fetchall  \
https://golang.org \
http://gopl.io https://godoc.org   

fetcher.FetchConcurrent: Fetching URLs...
HTTP status: 200 OK
0.08s     4154  http://gopl.io
HTTP status: 200 OK
0.16s    59868  https://golang.org
HTTP status: 200 OK
0.27s    17461  https://godoc.org
0.27s elapsed

    end note 
}
stop
@enduml
----
